(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{533:function(t,s,a){"use strict";a.r(s);var e=a(17),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"venus-集群最大化利用资源增长算力方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#venus-集群最大化利用资源增长算力方案"}},[t._v("#")]),t._v(" Venus-集群最大化利用资源增长算力方案")]),t._v(" "),a("p",[t._v("   在 Filecoin的网络中，算力大小至关重要，与矿工的收入息息相关。算力的增长与维持需要软硬件资源较多，每个扇区的密封需要P1、P2、C1，C2等\n诸多过程，并且每个过程所依赖的资源各不相同，如：P1偏向多核CPU，P4可用GPU优化等。故如何找出能最大化利用现有资源提升算力的方案是一个复杂的过程。这篇文章为如何找出最优方案提供一些思路。")]),t._v(" "),a("h2",{attrs:{id:"总体思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总体思路"}},[t._v("#")]),t._v(" 总体思路")]),t._v(" "),a("blockquote",[a("p",[t._v("本文方案是通过各个阶段的任务耗时来推算如何均衡的分配各阶段任务的机器数量占比")])]),t._v(" "),a("ul",[a("li",[t._v("根据实际场景，将所有加速配置都打开，做几个sector，统计每个阶段任务耗时。每个阶段对硬件资源的的依赖如下：\n"),a("ul",[a("li",[t._v("P1：cpu及磁盘io")])]),t._v(" "),a("ul",[a("li",[t._v("P2：cpu，gpu，带宽及磁盘io")]),t._v(" "),a("li",[t._v("C1-C2： cpu，gpu，带宽及磁盘io")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("这里多做几个是为了统计出较稳定的耗时，此阶段需保持加速设置及软硬件资源始终不变。")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("维持任务数平衡，即每个机器都有任何时刻都有任务可做，理论上每个阶段任务数与耗时成反比；")])]),t._v(" "),a("li",[a("p",[t._v("扇区任务由pledge命令控制，配合最大并发密封扇区数（MaxSealingSectors）管理集群中sector并发数量；")])]),t._v(" "),a("li",[a("p",[t._v("每个worker可以指定可接受的任务类型。")])])]),t._v(" "),a("h2",{attrs:{id:"任务耗时统计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任务耗时统计"}},[t._v("#")]),t._v(" 任务耗时统计")]),t._v(" "),a("p",[t._v("   worker可以领取的任务类型有：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('TTAddPiece   TaskType = "seal/v0/addpiece"\nTTPreCommit1 TaskType = "seal/v0/precommit/1"\nTTPreCommit2 TaskType = "seal/v0/precommit/2"\nTTCommit1    TaskType = "seal/v0/commit/1" // NOTE: We use this to transfer the sector into miner-local storage for now; Don\'t use on workers!\nTTCommit2    TaskType = "seal/v0/commit/2"\n\nTTFinalize TaskType = "seal/v0/finalize"\n\nTTFetch  TaskType = "seal/v0/fetch"\nTTUnseal TaskType = "seal/v0/unseal"\n\n')])])]),a("p",[t._v("   每个任务都分为两个阶段：prepare阶段和worker阶段，在日志中表现为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# seal/v0/fetch\n2021-08-03T14:00:07.925+0800    INFO    advmgr  sector-storage/sched_worker.go:401      Sector 7 prepare for seal/v0/fetch ...\n2021-08-03T14:05:36.772+0800    INFO    advmgr  sector-storage/sched_worker.go:403      Sector 7 prepare for seal/v0/fetch end ...\n\n2021-08-03T14:05:36.772+0800    INFO    advmgr  sector-storage/sched_worker.go:442      Sector 7 work for seal/v0/fetch ...\n2021-08-03T14:05:36.774+0800    INFO    advmgr  sector-storage/sched_worker.go:444      Sector 7 work for seal/v0/fetch end ...\n\n# seal/v0/addpiece\n2021-08-03T13:38:37.977+0800    INFO    advmgr  sector-storage/sched_worker.go:401      Sector 8 prepare for seal/v0/addpiece ...\n2021-08-03T13:38:37.978+0800    INFO    advmgr  sector-storage/sched_worker.go:403      Sector 8 prepare for seal/v0/addpiece end ...\n\n2021-08-03T13:38:37.978+0800    INFO    advmgr  sector-storage/sched_worker.go:442      Sector 8 work for seal/v0/addpiece ...\n2021-08-03T13:44:26.295+0800    INFO    advmgr  sector-storage/sched_worker.go:444      Sector 8 work for seal/v0/addpiece end ...\n\n# seal/v0/commit/2\n2021-08-03T13:26:02.119+0800    INFO    advmgr  sector-storage/sched_worker.go:401      Sector 7 prepare for seal/v0/commit/2 ...\n2021-08-03T13:26:02.119+0800    INFO    advmgr  sector-storage/sched_worker.go:403      Sector 7 prepare for seal/v0/commit/2 end ...\n\n2021-08-03T13:26:02.119+0800    INFO    advmgr  sector-storage/sched_worker.go:442      Sector 7 work for seal/v0/commit/2 ...\n2021-08-03T13:49:46.180+0800    INFO    advmgr  sector-storage/sched_worker.go:444      Sector 7 work for seal/v0/commit/2 end ...\n\n# seal/v0/finalize\n2021-08-03T13:54:17.414+0800    INFO    advmgr  sector-storage/sched_worker.go:401      Sector 7 prepare for seal/v0/finalize ...\n2021-08-03T13:59:30.471+0800    INFO    advmgr  sector-storage/sched_worker.go:403      Sector 7 prepare for seal/v0/finalize end ...\n\n2021-08-03T13:59:30.471+0800    INFO    advmgr  sector-storage/sched_worker.go:442      Sector 7 work for seal/v0/finalize ...\n2021-08-03T14:00:07.915+0800    INFO    advmgr  sector-storage/sched_worker.go:444      Sector 7 work for seal/v0/finalize end ...\n\n")])])]),a("p",[t._v("   可以看出有些任务在prepare阶段比较耗时，有些在work阶段比较耗时，一般来说需要网路传输，带宽资源的在prepare比较耗时，如fetch，finalize等；而需要计算的任务在work阶段比较耗时，如AP，P1，P2，C2等。")]),t._v(" "),a("p",[t._v("   为了便于计算，这里将任务阶段进行合并，主要分为：AP，P1，P2，C2阶段，将这四个阶段之前的仍无耗时统一归为相应阶段的耗时，如 T（P1）=P1耗时+P1前的fetch耗时。这里waitseed怎么归类，在后面的时间逻辑中有没有考虑进去")]),t._v(" "),a("h2",{attrs:{id:"速率因子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#速率因子"}},[t._v("#")]),t._v(" 速率因子")]),t._v(" "),a("h3",{attrs:{id:"临时存储设备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#临时存储设备"}},[t._v("#")]),t._v(" 临时存储设备")]),t._v(" "),a("p",[t._v("  Filecoin 在封装算力是会产生一些临时文件，在任务的进行中存在很多随机存取，这就要求磁盘吞吐量不能太差，否则会导致磁盘IO过高，计算资源等待磁盘读取处于闲置状态。")]),t._v(" "),a("ul",[a("li",[t._v("如何挑选适合的设备")])]),t._v(" "),a("p",[t._v("  如何寻找适合的设备，其实就是需要多少的磁盘吞吐量，可以通过一个简单的计算公式得到它。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("文件大小 * 线程并行数量 / 运行时间 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 平均每秒钟传输速度\n  \n因为每个阶段的吞吐不同，拆分计算可以让得到的数据更精准\n  \nP1 读取 + P1 写入 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" P1 阶段所需的吞吐量，其他阶段相同，把所有阶段所需的吞吐加起来就得到了所需的吞吐量，当然需要一些性能上的冗余\n")])])]),a("p",[t._v("  通常情况下绝大多数的矿工都会使用SSD或者NVME，当有多块硬盘时我们可以通过"),a("code",[t._v("venus-worker storage attach --seal </path/>")]),t._v("命令或者启动多个worker来设置多个路径，但这并不是一个比较好的方法，路径过于分散会导致后续的维护相对复杂，无法充分利用，通过创建raid方式可以获得更好的性能和空间利用率，并且便于后续的维护。")]),t._v(" "),a("ul",[a("li",[t._v("软raid创建")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mdadm")]),t._v(" -C /dev/md1 -l "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" /dev/sdb1 /dev/sdc1\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mdadm")]),t._v(" -C /dev/md2 -l "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" -n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" /dev/sd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("b-g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n-C $创建软件RAID\n-l $指定RAID级别  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("表示raid1  其他同理  \n-n $指定磁盘个数\n-x $指定备用设备个数\n-A $重组之前的设备\n")])])]),a("p",[t._v("​\t有关mdadm用法、MD和各种级别的RAID的更多信息，请参阅：http://raid.wiki.kernel.org/")]),t._v(" "),a("p",[t._v("​\t获取最新版本的mdadm应始终可以从如下链接获取：http://www.kernel.org/pub/linux/utils/raid/mdadm/")]),t._v(" "),a("p",[t._v("​\t硬raid创建时请查看您的raid卡型号和说明进行操作")]),t._v(" "),a("h3",{attrs:{id:"永久存储设备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#永久存储设备"}},[t._v("#")]),t._v(" 永久存储设备")]),t._v(" "),a("p",[t._v("   永久存储设备的访问机制和可能遇到的问题：")]),t._v(" "),a("ol",[a("li",[t._v("在每个任务阶段产生的文件有些是要永久存储的，用于wdPoSt或winningPoSt，在每个sector完成阶段需要传输到永久存储目录，这个过程需要带宽资源，并且要保证磁盘io；")]),t._v(" "),a("li",[t._v("wdPoSt大量的随机读取非常小的文件，这可能会导致读取过慢而影响时空证明导致算力惩罚；")]),t._v(" "),a("li",[t._v("当存储过于集中时，少量的机器损坏会导致所有的数据丢失；")]),t._v(" "),a("li",[t._v("当磁盘过多时，并且盘符没有固定，启动时可能导致盘符移动；")]),t._v(" "),a("li",[t._v("如果是raid，尽量选择raid5或者raid6，raid10这种冗余性更高的方式；")]),t._v(" "),a("li",[t._v("需要监控磁盘空间利用率并报警。")])]),t._v(" "),a("h3",{attrs:{id:"网络传输"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络传输"}},[t._v("#")]),t._v(" 网络传输")]),t._v(" "),a("p",[t._v("   网络传输会有两个部分：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("临时数据的网络传输，某个阶段的任务需要上个阶段的数据时会用http协议请求所需文件，需要保证传输时间小于计算时间。")]),t._v(" "),a("p",[t._v("举例：\n传输往往和计算是同步进行的")]),t._v(" "),a("p",[t._v("传输时间 > 计算时间 资源闲置，计算资源等待网络资源，拉长整个扇区封装的声明周期，就是降产")]),t._v(" "),a("p",[t._v("传输时间 < 计算时间 计算资源充分利用")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("观察计算资源是否出现闲置")])]),t._v(" "),a("li",[a("p",[t._v("计算网络传输速度能否满足计算时间")]),t._v(" "),a("p",[t._v("Precommit2如果计算耗时25分钟，读取 440G左右文件，写入100G左右文件"),a("br"),t._v("\n(440G * 1024 / 25 / 60) + (100G * 1024 / 25 / 60) = 单个线程所需的吞吐量")])]),t._v(" "),a("li",[a("p",[t._v("多台机器同步阶段的文件传输")]),t._v(" "),a("p",[t._v("我们有A，B，C 三个机器分别负责P1，P2，Commit")]),t._v(" "),a("p",[t._v("当A机器开始P1时会向B机器的P2传输32G左右的Unsealed")]),t._v(" "),a("p",[t._v("当B机器开始P2时，A机器的P1生成的440G左右所有文件会传输到B的机器上")]),t._v(" "),a("p",[t._v("Commit又分为C1和C2.当C机器运行C1时需要P1和P2的所有文件，计算的结果通过内存直接传递给C2，所以并不会在落盘新的文件")])])])]),t._v(" "),a("li",[a("p",[t._v("最终数据传输，我们要知道当最终的存储也会成为我们的产量瓶颈（貌似和下面的不符合）")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("假设计算资源的产量是每天产出6T的算力，但如果存储的网络传输最大每天只能传输5T，那么这就会导致产量的下降")])]),t._v(" "),a("li",[a("p",[t._v("如果我们使用了NFS这样的网络文件系统，当网络断开链接是，NFS往往是会直接卡死的，所以可能需要设置NFS的超时机制")])])])])]),t._v(" "),a("h3",{attrs:{id:"worker的指令集加速"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#worker的指令集加速"}},[t._v("#")]),t._v(" worker的指令集加速")]),t._v(" "),a("p",[t._v("   P1阶段时，使用SHA指令集和不使用指令集会有巨大的差距，目前大多数矿工都采用AMD型号的CPU原因就是SHA指令集的关系，研究发现，使用SHA指令集基本可以跑进250分钟以内，但不使用SHA指令集能够跑进420分钟已经非常艰难了")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("确保编译时使用RUSTFLAGS=\"-C target-cpu=native -g\" FFI_BUILD_FROM_SOURCE=\"1\" 源码编译filecoin-ffi库，如果cpu支持则启用SHA扩展，这会大幅提高扇区封装速度，源码编译（make deps）时特征如下:\n\n+ trap '{ rm -f $__build_output_log_tmp; }' EXIT\n+ local '__rust_flags=--print native-static-libs -C target-feature=+sse2'\n+ RUSTFLAGS='--print native-static-libs -C target-feature=+sse2'\n+ cargo +nightly-2021-04-24 build --release --no-default-features --features multicore-sdr --features pairing,gpu\n+ tee /tmp/tmp.IYtnd3xka9\n   Compiling autocfg v1.0.1\n   Compiling libc v0.2.97\n   Compiling cfg-if v1.0.0\n   Compiling proc-macro2 v1.0.27\n   Compiling unicode-xid v0.2.2\n   Compiling syn v1.0.73\n   Compiling lazy_static v1.4.0\n   Compiling cc v1.0.68\n   Compiling typenum v1.13.0\n   Compiling serde_derive v1.0.126\n   Compiling serde v1.0.126\n")])])]),a("h3",{attrs:{id:"核数限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核数限制"}},[t._v("#")]),t._v(" 核数限制")]),t._v(" "),a("p",[t._v("​\t当想要把CPU的资源利用的更高时，需要非常合理的规划CPU的使用，比如有一个64核的CPU，我们要想PreCommit2和Commit分别分到32核，这样两种任务相互不受影响，也不会导致某一个占用大量的计算资源导致另一个卡住的情况，此时我们就需要利用到核数限制")]),t._v(" "),a("ul",[a("li",[t._v("通过"),a("code",[t._v("taskset")]),t._v("限核")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当我们想要启动某个进程时，可以通过 taskset -c 0-31 这种方式来进行限核操作")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 例如")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("TRUST_PARAMS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nohup")]),t._v(" taskset -c "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("-32 ./venus-worker run "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--miner-addr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("/ip4/sealer-ip/tcp/sealer-port"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--miner-token"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("token"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("  \n--listen"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0:345"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("8")]),t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("flags"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" worker.log "),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">")]),a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("&1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 扩展使用 taskset -c 0-9,19-29,39-49 进行跳跃式限核")]),t._v("\n")])])]),a("p",[t._v("这种方式的弊端就在于不方便在程序运行时对核数进行实时调整")]),t._v(" "),a("ul",[a("li",[t._v("通过Cgrep限核")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 好的目录划分会帮助对多个进程的管理")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p /sys/fs/cgroup/cpuset/Pre1-worker\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置能够使用的核数范围")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("-31 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /sys/fs/cgroup/cpuset/Pre1-worker/cpuset.cpus\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 加入进程的PID")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("PID"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /sys/fs/cgroup/cpuset/Pre1-worker/cgroup.procs\n")])])]),a("p",[t._v("Cgrep是在进程启动之后加入到配置文件的，并且支持实时的修改核数限制，当然也可以尝试使用docker限核，但docker的限核也是通过Cgrep来实现，至于Cgrep其他的用法我们基本都用不到，就不一一说明了")]),t._v(" "),a("h2",{attrs:{id:"worker运行方式和资源消耗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#worker运行方式和资源消耗"}},[t._v("#")]),t._v(" worker运行方式和资源消耗")]),t._v(" "),a("h3",{attrs:{id:"p1阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p1阶段"}},[t._v("#")]),t._v(" P1阶段")]),t._v(" "),a("ul",[a("li",[t._v("P1阶段的加速因子")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("FIL_PROOFS_MAXIMIZE_CACHING")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 控制cache文件缓存到内存中，起到加速作用，会占用56G内存")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("FIL_PROOFS_USE_MULTICORE_SDR")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 控制P1阶段是否使用多核运行，他会占用单个CPU组，所以每个CPU缓存组只会运行一个任务")]),t._v("\n")])])]),a("p",[a("code",[t._v("P1")]),t._v("阶段有两种选择，可以选择更快的速度或者更少的CPU，需要根据实际资源决定。")]),t._v(" "),a("ul",[a("li",[t._v("P1的内存资源消耗")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 内存中会存储56G的cache文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 加上2层layer文件，32G的矿工每层文件32G，64G每层文件64G")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以32G矿工为例，如果我们同时运行了10个任务")]),t._v("\n  \n56G cahce 文件 + "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v(" *2 * 并行线程数 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 696G Mem\n")])])]),a("ul",[a("li",[t._v("P1的磁盘资源消耗")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 11层layer文件 ")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 64G的tree-d文件")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 32G的unsealed文件")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(" * 32G + "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" + "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 440G\n")])])]),a("h3",{attrs:{id:"p2阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2阶段"}},[t._v("#")]),t._v(" P2阶段")]),t._v(" "),a("ul",[a("li",[t._v("P2的加速因子有两个")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("FIL_PROOFS_USE_GPU_COLUMN_BUILDER")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用GPU运算tree-r-last阶段")]),t._v("\n   \n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("FIL_PROOFS_USE_GPU_TREE_BUILDER")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用GPU运算tree-c阶段")]),t._v("\n   \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 任何环境变量都不增加的情况下使用CPU运算")]),t._v("\n")])])]),a("p",[t._v("从实验结果来看使用GPU运算要明显比CPU快得多，而CPU运算时的核数，主频跟时间是成线性比例的，CPU核数越多速度越快，主频越高越快，反之亦然。")]),t._v(" "),a("ul",[a("li",[t._v("P2内存资源")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("--precommit2   "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("enable")]),t._v(" precommit2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("32G sectors: all cores, 96GiB Memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default: "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在命令行中可以看到运行一个需要96GiB的内存，如果并行2个就是2倍")]),t._v("\n")])])]),a("ul",[a("li",[t._v("P2的磁盘资源消耗")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 32G")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 8个tree-c文件，每个 4.6G左右")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 8个tree-r-last,每个9.2M")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# t_aux，4K，p_aux，4K")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 32G的sealed文件")]),t._v("\n  \n----------------------\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 64G")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 16个tree-c文件，每个 4.6G左右")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 16个tree-r-last,每个9.2M")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# t_aux，4K，p_aux，4K")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 64G的sealed文件")]),t._v("\n")])])]),a("h3",{attrs:{id:"commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit"}},[t._v("#")]),t._v(" Commit")]),t._v(" "),a("ul",[a("li",[t._v("Commit中的C1的磁盘资源消耗")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# C1需要前面2个阶段产生的所有文件")]),t._v("\n\nP1 440G + P2 79G "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 519G \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 每个C1的任务需要消耗487G左右的空间")]),t._v("\n")])])]),a("p",[t._v("C1并没有太多的CPU消耗，并且时间极短")]),t._v(" "),a("ul",[a("li",[t._v("Commit中的C2的运行方式，CPU和GPU")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("BELLMAN_NO_GPU")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 禁用GPU")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("BELLMAN_CUSTOM_GPU")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GeForce RTX 3090:10496"')]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定GPU的cuda核心数，当GPU型号比较冷门无法识别时可使用")]),t._v("\n")])])]),a("ul",[a("li",[t._v("C2的内存资源消耗")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("enable")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("32G sectors: all cores or GPUs, 128GiB Memory + 64GiB swap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default: "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 命令行中指出总共需要 128G + 64 G = 192G的内存")]),t._v("\n")])])]),a("h2",{attrs:{id:"产量优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#产量优化"}},[t._v("#")]),t._v(" 产量优化")]),t._v(" "),a("h3",{attrs:{id:"产量的计算公式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#产量的计算公式"}},[t._v("#")]),t._v(" 产量的计算公式")]),t._v(" "),a("p",[t._v("  每个阶段的效率:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" 产出数量 / 时间 = 效率\n \n # 得到效率之后，我们就可以很轻松的算出产量\n \n 效率/h/个数 * 24h * 32G = 日产量\n")])])]),a("p",[t._v("例如我们有1台机器")]),t._v(" "),a("p",[t._v("P1：240分钟")]),t._v(" "),a("p",[t._v("P2：30分钟")]),t._v(" "),a("p",[t._v("Commit：35分钟")]),t._v(" "),a("p",[t._v("此时我们可以简单一个计算公式的表格")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("运行阶段")]),t._v(" "),a("th",[t._v("时间/m")]),t._v(" "),a("th",[t._v("并行线程数")]),t._v(" "),a("th",[t._v("效率/时间h/个数")]),t._v(" "),a("th",[t._v("计算公式")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("P1")]),t._v(" "),a("td",[t._v("240")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("0.25")]),t._v(" "),a("td",[t._v("= 1 / (240 /60)")])]),t._v(" "),a("tr",[a("td",[t._v("P2")]),t._v(" "),a("td",[t._v("30")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("= 1 / (30 /60)")])]),t._v(" "),a("tr",[a("td",[t._v("Commit")]),t._v(" "),a("td",[t._v("35")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1.7142857143")]),t._v(" "),a("td",[t._v("= 1 / (35 /60)")])])])]),t._v(" "),a("h4",{attrs:{id:"如何找到每个阶段的最佳运行数量和配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何找到每个阶段的最佳运行数量和配置"}},[t._v("#")]),t._v(" 如何找到每个阶段的最佳运行数量和配置")]),t._v(" "),a("p",[t._v("   从上面的表格中我们明显看出P1的效率明显不足，而此时P2和Commit机器必定会闲置，如何处理呢？产出的时间无法调整， 那么我们就可以调整并行的线程数，当然我们可以新增一些计算内存的公式来指导我们对内存的消耗")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("运行阶段")]),t._v(" "),a("th",[t._v("时间/m")]),t._v(" "),a("th",[t._v("并行线程数")]),t._v(" "),a("th",[t._v("效率/时间h/个数")]),t._v(" "),a("th",[t._v("计算公式")]),t._v(" "),a("th",[t._v("日产量/G")]),t._v(" "),a("th",[t._v("公式")]),t._v(" "),a("th",[t._v("mem/G")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("P1")]),t._v(" "),a("td",[t._v("240")]),t._v(" "),a("td",[t._v("7")]),t._v(" "),a("td",[t._v("1.75")]),t._v(" "),a("td",[t._v("= 7 / (240 /60)")]),t._v(" "),a("td",[t._v("1344")]),t._v(" "),a("td",[t._v("=7*64+56")]),t._v(" "),a("td",[t._v("504")])]),t._v(" "),a("tr",[a("td",[t._v("P2")]),t._v(" "),a("td",[t._v("30")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("= 1 / (30 /60)")]),t._v(" "),a("td",[t._v("1536")]),t._v(" "),a("td",[t._v("=1*96")]),t._v(" "),a("td",[t._v("96")])]),t._v(" "),a("tr",[a("td",[t._v("Commit")]),t._v(" "),a("td",[t._v("35")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1.7142857143")]),t._v(" "),a("td",[t._v("= 1 / (35 /60)")]),t._v(" "),a("td",[t._v("1316.571429")]),t._v(" "),a("td",[t._v("=1*128+64")]),t._v(" "),a("td",[t._v("192")])])])]),t._v(" "),a("p",[t._v("现在三个阶段的效率已经非常接近了，但是此时我们仍然存在一些问题：")]),t._v(" "),a("ol",[a("li",[t._v("Commit效率低于P1，这会导致大量的任务阻塞到Commit阶段")]),t._v(" "),a("li",[t._v("当某个阶段的效率过高时就会出现闲置")]),t._v(" "),a("li",[t._v("我们需要微调资源的分布来尽可能的保证每个阶段的效率无限相等")])]),t._v(" "),a("h4",{attrs:{id:"集群方案运行的的可能性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群方案运行的的可能性"}},[t._v("#")]),t._v(" 集群方案运行的的可能性")]),t._v(" "),a("p",[t._v("​\t\t当我们有多台机器时，我们就要决定某些机器运行哪些阶段，在这之前我们再来看下不同阶段的特性：")]),t._v(" "),a("ol",[a("li",[t._v("P1 : 极度消耗内存，可以单核，多核，并行运行，临时存储需要伴随着并行数量的增多而增多")]),t._v(" "),a("li",[t._v("P2 : 轻度消耗内存，CPU，GPU都可以运行，如果拆分，需要传输大量的文件")]),t._v(" "),a("li",[t._v("Commit: 中度消耗内存，CPU，GPU都可以运行，如果拆分，需要传输所有临时文件")])]),t._v(" "),a("p",[t._v("如果我们此时只考虑这些因素，那么我们的组合方式有多少种呢？而这些不同的组合方式一定会带来不通的产量，虽然每个矿工的机器都有所不同，但我们的目标是一样的：")]),t._v(" "),a("ol",[a("li",[t._v("更高的产量组合运行方式")]),t._v(" "),a("li",[t._v("各个阶段更加均衡的分布")])]),t._v(" "),a("p",[t._v("我们可能无法做到完美，但无限接近也是最好的结果")]),t._v(" "),a("h4",{attrs:{id:"如何寻找最佳的下发任务数-始终保持机器满负荷运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何寻找最佳的下发任务数-始终保持机器满负荷运行"}},[t._v("#")]),t._v(" 如何寻找最佳的下发任务数，始终保持机器满负荷运行")]),t._v(" "),a("p",[t._v("  当我们找到最佳的组合方式之后我们需要考虑的就是如何才能保证这些机器24小时都是不间断运行的呢？我们不希望任何一个阶段的出现闲置")]),t._v(" "),a("p",[t._v("当我们发现P1需要并行7个时，那么我们如果保证P1的任务量是充足的，那么后续的两个阶段在不考虑其他问题的情况下，也一定是充足的，所以我们需要保证始终维持P1时刻都有7个任务")]),t._v(" "),a("div",{staticClass:"language-toml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在venus-sealer的配置文件中我们可以设置最大的任务数，这可以帮我我们避免任务数下发过多")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("DataDir")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"~/.venussealer"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("API")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("ListenAddress")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/ip4/0.0.0.0/tcp/2345/http"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("RemoteListenAddress")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"192.168.200.6:2345"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("Timeout")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"30s"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("Sealing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("MaxWaitDealsSectors")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("MaxSealingSectors")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改为 7")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("MaxSealingSectorsForDeals")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("p",[t._v("此时我们可以通过一个简单的定时脚本就可以做到，始终维持最佳的任务量了")]),t._v(" "),a("h2",{attrs:{id:"损失和止损"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#损失和止损"}},[t._v("#")]),t._v(" 损失和止损")]),t._v(" "),a("p",[t._v("  如果一个任务执行错误之后又被反复的重试，这就像我们有7个通道进行算力的封装，但是此时有一通道阻塞或者损坏，这就会降低我们 1 / 7 的产量，所以及时的处理错误也是非常重要的")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("何种情况下应该立刻抛弃任务")]),t._v(" "),a("ol",[a("li",[t._v("ticket过期")]),t._v(" "),a("li",[t._v("Commit过期")]),t._v(" "),a("li",[t._v("依赖文件损坏重试多次都未成功时;")])])]),t._v(" "),a("li",[a("p",[t._v("移除无法完成的sector")])])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("venus-sealer sectors remove --really-do-it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("sectorNum"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("如遇到无法彻底删除请查询："),a("a",{attrs:{href:"https://github.com/filguard/lotus-ops/blob/master/documents/questions.md#1-%E9%A1%BD%E5%9B%BA%E6%89%87%E5%8C%BA%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4",target:"_blank",rel:"noopener noreferrer"}},[t._v("顽固扇区如何删除"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);